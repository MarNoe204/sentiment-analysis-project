name: CI/CD Pipeline

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  build-and-test:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Set up Python 3.11
      uses: actions/setup-python@v5
      with:
        python-version: '3.11'
        cache: 'pip'

    - name: Install dependencies
      run: |
        pip install --upgrade pip
        # Installiere alle regulären Abhängigkeiten
        pip install -r requirements.txt
        # Installiere pytest und ruff für die CI-Prüfungen
        pip install pytest ruff mypy

    # ----------------------------------------------------
    # 1. Code Quality Gates (Ruff & Mypy)
    # ----------------------------------------------------

    - name: Linting (Ruff)
      run: |
        ruff check .
        ruff format . --check

    - name: Type Checking (Mypy)
        # --explicit-package-bases behebt den "found twice" Fehler und 
        # stellt sicher, dass mypy src/ als Basis für src.predict erkennt.
      run: mypy --explicit-package-bases src/train.py src/predict.py tests/test_prediction_sanity.py
        
    # ----------------------------------------------------
    # 2. Unit & Sanity Testing
    # ----------------------------------------------------
      
    - name: Run Pytest
      run: |
        # Stellt sicher, dass das Modell vor dem Test existiert und trainiert wurde
        python src/train.py --data data/sentiments.csv --out models/sentiment.joblib
        pytest --junitxml=reports/junit/unit-tests.xml
        
    # ----------------------------------------------------
    # 3. Docker Build & Final Sanity Check
    # ----------------------------------------------------
        
    - name: Build Docker image (with cache bypass)
      run: |
        docker build -t sentiment-analysis-app --no-cache .

    - name: Docker Container Sanity Check
      run: |
        # Führt den Container aus, um die Vorhersagefunktionalität zu prüfen
        RESULT=$(docker run sentiment-analysis-app "I absolutely loved it")
        # Stellt sicher, dass die Ausgabe 'positive' enthält und der Konfidenzwert >= 0.65 ist
        if ! echo "$RESULT" | grep -E "positive\s+0\.(6[5-9]|[7-9][0-9])|positive\s+1\." > /dev/null; then
            echo "::error::Docker Sanity Check fehlgeschlagen! Erwartet positive >= 0.65, bekam: $RESULT"
            exit 1
        else
            echo "Docker Sanity Check erfolgreich: $RESULT"
        fi

    - name: Login and Push Docker image
      env:
        DOCKER_USERNAME: ${{ secrets.DOCKERHUB_USERNAME }}
        DOCKER_PASSWORD: ${{ secrets.DOCKERHUB_TOKEN }} # Oder DOCKERHUB_PASSWORD
      run: |
        # 1. Login
        echo "${DOCKER_PASSWORD}" | docker login -u "${DOCKER_USERNAME}" --password-stdin
    
        # 2. Taggen (falls noch nicht im Build-Schritt passiert)
        IMAGE_NAME=sentiment-analysis-app
        DOCKER_REPO=<DOCKERHUB_USERNAME>/${IMAGE_NAME}

        # 3. Push des neuesten Images
        docker push ${DOCKER_REPO}:latest